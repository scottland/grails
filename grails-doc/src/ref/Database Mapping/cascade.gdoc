h1. cascade

h2. Purpose

Configures the cascading behavior of an association.

h2. Examples

{code:java}
class Author {
	static hasMany = [books:Book]
	static mapping = {
		books cascade:'delete-orphan'
	}
}
{code}

h2. Description

Usage: @association_name(cascade:string)@

Arguments:

* @cascade@ - The cascading behavior to define. Can be one or more (comma-separated) of @all@,@create@, @merge@, @save-update@, @delete@, @lock@, @refresh@, @evict@, @replicate@ or @delete-orphan@ (one-to-many associations only). 

By default GORM configures a cascading policy of "all" in the case where one entity "belongs to" another. For example:

{code}
class Book {
	static belongsTo = [author:Author]
}
class Author {
	static hasMany = [books:Book]
}
{code}

Here all persistence operations will cascade from the @Author@ domain to the @Book@ domain. So when a @Author@ is deleted so will all his books. 

If the association doesn't define an owner (a "belong to" relationship):

{code}
class Book {
}
class Author {
	static hasMany = [books:Book]
}
{code}

Then GORM uses a cascading policy of "save-update" by default. So if an @Author@ is deleted the @Book@ domains associated with the @Author@ won't be deleted. If you wish to customize this behavior you can use the @cascade@ argument on an association:

{code:java}
class Author {
	static hasMany = [books:Book]
	static mapping = {
		books cascade:'all-delete-orphan'
	}
}
{code}

Here a @Book@ will also be deleted if removed (orphaned) from the @books@ association.

See the section on [transitive persistence|http://www.hibernate.org/hib_docs/v3/reference/en/html_single/#objectstate-transitive] in the Hibernate user guide.
